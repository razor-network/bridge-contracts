{
  "address": "0x1dc797A9f7bb6a8A01BFE3322EF795172ee40790",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "validatorId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dynasty",
          "type": "uint256"
        }
      ],
      "name": "AttestSigner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numRequests",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "int8",
              "name": "power",
              "type": "int8"
            },
            {
              "internalType": "uint16",
              "name": "collectionId",
              "type": "uint16"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Structs.Value[]",
          "name": "requestValues",
          "type": "tuple[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requesterAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dynasty",
          "type": "uint256"
        }
      ],
      "name": "CreatedRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "messageData",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dynasty",
          "type": "uint256"
        }
      ],
      "name": "FinalizeRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validatorAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWhitelisted",
          "type": "uint32"
        }
      ],
      "name": "SetWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "mode",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dynasty",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        }
      ],
      "name": "SigningFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "validatorId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dynasty",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "validatorId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dynasty",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "validatorId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "mode",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dynasty",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        }
      ],
      "name": "attestSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "attestedSignerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockIdsConfirmed",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "blocks",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int8",
              "name": "power",
              "type": "int8"
            },
            {
              "internalType": "uint16",
              "name": "collectionId",
              "type": "uint16"
            },
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Structs.Value[]",
          "name": "requestValues",
          "type": "tuple[]"
        }
      ],
      "name": "createRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dynastyLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "messageData",
          "type": "bytes"
        }
      ],
      "name": "finalizeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstDynastyCreation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "blockId",
          "type": "uint32"
        }
      ],
      "name": "getBlock",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structs.Block",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dynasty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "getBlockIdsConfirmed",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDynasty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMode",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "mode",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        }
      ],
      "name": "getRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "fulfilled",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "requestId",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "requestData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structs.Request",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dynasty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "validatorId",
          "type": "uint32"
        }
      ],
      "name": "getSignerAttestation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "validatorId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "signerAddress",
              "type": "address"
            }
          ],
          "internalType": "struct Structs.SignerAttestation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "validatorId",
          "type": "uint32"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "validatorId",
          "type": "uint32"
        }
      ],
      "name": "getValidator",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "id",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "_validatorAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            }
          ],
          "internalType": "struct Structs.Validator",
          "name": "validator",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidatorId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeTokenAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "locks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockAfter",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "modeChange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numBlocksCreated",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numParticipants",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numRequests",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numRequestsFulfilled",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numValidators",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numWhitelisted",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "requestId",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "requestData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dynastyLength",
          "type": "uint256"
        }
      ],
      "name": "setDynastyLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochLength",
          "type": "uint256"
        }
      ],
      "name": "setEpochLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStake",
          "type": "uint256"
        }
      ],
      "name": "setMinStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_numParticipants",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_threshold",
          "type": "uint32"
        }
      ],
      "name": "setNumParticipantsAndThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validatorAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_withdrawLockPeriod",
          "type": "uint16"
        }
      ],
      "name": "setWithdrawLockPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "signerAddressPerDynasty",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "signerAttestations",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "validatorId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signerVotesPerAttestation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "threshold",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validatorIds",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "validators",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_validatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLockPeriod",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x767c3bbb4e3661bbd735c212b71eba59a06dfc1dd47f10923cdbf28e99fd40dd",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xc67bEC0FF14fd21e3F971643774b85C3cfE4a252",
    "contractAddress": "0x1dc797A9f7bb6a8A01BFE3322EF795172ee40790",
    "transactionIndex": 0,
    "gasUsed": "3418815",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000400000001000000000000000000000000000000000000000000000000020000000000000000000800000000000000000000000000001000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000100000000000020000000000000000000000000000000000000000000000000000200000000000000",
    "blockHash": "0x71f3e08c8b2ea70af3b496a50958816263b6a695cabfd98cfbe2da45b25a7eb0",
    "transactionHash": "0x767c3bbb4e3661bbd735c212b71eba59a06dfc1dd47f10923cdbf28e99fd40dd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2335268,
        "transactionHash": "0x767c3bbb4e3661bbd735c212b71eba59a06dfc1dd47f10923cdbf28e99fd40dd",
        "address": "0x1dc797A9f7bb6a8A01BFE3322EF795172ee40790",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c67bec0ff14fd21e3f971643774b85c3cfe4a252",
          "0x000000000000000000000000c67bec0ff14fd21e3f971643774b85c3cfe4a252"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x71f3e08c8b2ea70af3b496a50958816263b6a695cabfd98cfbe2da45b25a7eb0"
      }
    ],
    "blockNumber": 2335268,
    "cumulativeGasUsed": "3418815",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "75a408eb102dc3b2a26aa0f7dff03578",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"validatorId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"}],\"name\":\"AttestSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numRequests\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"power\",\"type\":\"int8\"},{\"internalType\":\"uint16\",\"name\":\"collectionId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Structs.Value[]\",\"name\":\"requestValues\",\"type\":\"tuple[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requesterAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"}],\"name\":\"CreatedRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"messageData\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"}],\"name\":\"FinalizeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWhitelisted\",\"type\":\"uint32\"}],\"name\":\"SetWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"SigningFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"validatorId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"validatorId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"validatorId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"attestSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"attestedSignerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockIdsConfirmed\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"blocks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int8\",\"name\":\"power\",\"type\":\"int8\"},{\"internalType\":\"uint16\",\"name\":\"collectionId\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.Value[]\",\"name\":\"requestValues\",\"type\":\"tuple[]\"}],\"name\":\"createRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynastyLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"messageData\",\"type\":\"bytes\"}],\"name\":\"finalizeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstDynastyCreation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"blockId\",\"type\":\"uint32\"}],\"name\":\"getBlock\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Structs.Block\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getBlockIdsConfirmed\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDynasty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMode\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"}],\"name\":\"getRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"requestData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structs.Request\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dynasty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validatorId\",\"type\":\"uint32\"}],\"name\":\"getSignerAttestation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"internalType\":\"struct Structs.SignerAttestation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"validatorId\",\"type\":\"uint32\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"validatorId\",\"type\":\"uint32\"}],\"name\":\"getValidator\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_validatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.Validator\",\"name\":\"validator\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockAfter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"modeChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBlocksCreated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numParticipants\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRequests\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRequestsFulfilled\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numValidators\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWhitelisted\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"requestId\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"requestData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dynastyLength\",\"type\":\"uint256\"}],\"name\":\"setDynastyLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_numParticipants\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_threshold\",\"type\":\"uint32\"}],\"name\":\"setNumParticipantsAndThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_withdrawLockPeriod\",\"type\":\"uint16\"}],\"name\":\"setWithdrawLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signerAddressPerDynasty\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signerAttestations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"validatorId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signerVotesPerAttestation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validatorIds\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_validatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLockPeriod\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AttestSigner(address,uint32,address,uint256,uint256)\":{\"details\":\"Emitted when a validator tries to attest signerAddress for the first time.\",\"params\":{\"dynasty\":\"current dynasty of attestSigner\",\"epoch\":\"current epoch of attestSigner\",\"sender\":\"caller of the attestSigner\",\"signerAddress\":\"address attested by all validators\",\"validatorId\":\"ID of the validator from the active set of validators\"}},\"CreatedRequest(uint32,(int8,uint16,bytes32,uint256)[],address,uint256,uint256)\":{\"details\":\"Emitted when there has been a call to createRequest. Can only be called by the admin\",\"params\":{\"numRequests\":\"number of requests so far (requestId)\",\"requestValues\":\"Struct of values submitted consists of (int8 power,uint16 collectionId,bytes32 name,uint256 value)\",\"requesterAddress\":\"address of the createRequest caller\"}},\"FinalizeRequest(bytes,address,bytes,address,uint256,uint256)\":{\"details\":\"Emitted when a block is successfully created and finalized.\",\"params\":{\"dynasty\":\"current dynasty of finalizeRequest\",\"epoch\":\"current epoch of finalizeRequest\",\"messageData\":\"the data being finalized\",\"sender\":\"caller of finalizeRequest ie, finalizing address\",\"signature\":\"with which the message is signed\",\"signerAddress\":\"address of the public signer address\"}},\"SetWhitelist(address,bool,uint32)\":{\"details\":\"Emitted when an address is whitelisted by admin\",\"params\":{\"numWhitelisted\":\"number of whitelisted addresses\",\"status\":\"is address whitelisted or not\",\"validatorAddress\":\"address of the validator\"}},\"SigningFulfilled(uint8,uint256,uint256,address)\":{\"details\":\"Emitted when signerVotesPerAttestation in current dynasty has votes more than the required threshold for the current signerAddress.\",\"params\":{\"dynasty\":\"current dynasty mode change occurred\",\"epoch\":\"current epoch mode change occurred\",\"mode\":\"signing mode\",\"signerAddress\":\"address attested by all validators\"}},\"Staked(uint256,address,uint32,uint256,uint256)\":{\"details\":\"Emitted when a whitelisted address has staked RAZOR tokens.\",\"params\":{\"amount\":\"staked by validator\",\"dynasty\":\"current dynasty validator has staked in\",\"epoch\":\"current epoch validator has staked in\",\"validator\":\"address\",\"validatorId\":\"ID of given validator address\"}},\"Unstaked(address,uint32,uint256,uint256)\":{\"details\":\"Emitted when a whitelisted address has unstaked RAZOR tokens.\",\"params\":{\"dynasty\":\"current dynasty validator has unstaked in\",\"epoch\":\"current epoch validator has unstaked in\",\"validator\":\"address\",\"validatorId\":\"ID of given validator address\"}},\"Withdraw(address,uint32,uint8,uint256,uint256)\":{\"details\":\"Emitted when a whitelisted address has withdrawn RAZOR tokens.\",\"params\":{\"dynasty\":\"current dynasty validator has unstaked in\",\"epoch\":\"current epoch validator has unstaked in\",\"mode\":\"current mode\",\"validator\":\"address\",\"validatorId\":\"ID of given validator address\"}}},\"kind\":\"dev\",\"methods\":{\"attestSigner(address)\":{\"params\":{\"signerAddress\":\"address of the signer that is being attested by the validator\"}},\"createRequest((int8,uint16,bytes32,uint256)[])\":{\"params\":{\"requestValues\":\"values to be bridged by the bridge node\"}},\"finalizeRequest(bytes,bytes)\":{\"params\":{\"messageData\":\"the message that is to be bridged. The message has to be encoded and then sent to the contracts. Encoding is to be done in the following pattern: epoch(uint256), requestId(uint32), timestamp(uint256), values(Struct.Value[]) If not followed, the contracts would throw an error\",\"signature\":\"generated signature by the nodes\"}},\"getBlock(uint32)\":{\"params\":{\"blockId\":\"id of the block\"},\"returns\":{\"_0\":\"_block : struct of the confirmed block\"}},\"getBlockIdsConfirmed(uint256,uint256)\":{\"returns\":{\"_0\":\"blockIds array of blockIds confirmed\"}},\"getDynasty()\":{\"returns\":{\"_0\":\"the value of current dynasty\"}},\"getEpoch()\":{\"returns\":{\"_0\":\"the value of current epoch in the dynasty\"}},\"getMode()\":{\"returns\":{\"mode\":\"the value of current mode we are in the dynasty\"}},\"getRequest(uint32)\":{\"params\":{\"requestId\":\"the id of the request\"},\"returns\":{\"_0\":\"request the Struct of the request information\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSignerAttestation(uint256,uint256,uint32)\":{\"params\":{\"validatorId\":\"id of the validator whose signer attestion we want to fetcj\"},\"returns\":{\"_0\":\"the Struct of the signer attestation\"}},\"getStake(uint32)\":{\"params\":{\"validatorId\":\"ID of the validator\"},\"returns\":{\"_0\":\"stake of validator\"}},\"getValidator(uint32)\":{\"params\":{\"validatorId\":\"The validator ID\"},\"returns\":{\"validator\":\"The Struct of validator information\"}},\"getValidatorId()\":{\"returns\":{\"_0\":\"The validator ID\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address)\":{\"params\":{\"bridgeTokenAddress\":\"The address of the bridge token ERC20 contract\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setWhiteList(address,bool)\":{\"params\":{\"status\":\"whitelist status of the validator address\",\"validatorAddress\":\"address of the validator who the admin would set/remove from whitelist\"}},\"stake(uint256)\":{\"params\":{\"amount\":\"The amount to be staked\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"attestSigner(address)\":{\"notice\":\"each validator is required to send their attestation of the public key of the signer generated in the form of address. Once one of the votes of the signer address exceeds threshold, that is set as signer address for the rest of the dynasty\"},\"createRequest((int8,uint16,bytes32,uint256)[])\":{\"notice\":\"creates a request that is to be fulfilled by the bridge node\"},\"finalizeRequest(bytes,bytes)\":{\"notice\":\"Once the signature has been generated by the bridge nodes for a particular request, one of the validators can call this function which will verify the signature created with the message that is to be bridged\"},\"getBlock(uint32)\":{\"notice\":\"return the struct of the confirmed block\"},\"getBlockIdsConfirmed(uint256,uint256)\":{\"notice\":\"returns an array of blockIds confirmed in specified epoch of the dynasty\"},\"setWhiteList(address,bool)\":{\"notice\":\"adding/removing a validator from whitelist to enable/disable staking for the validator address\"},\"stake(uint256)\":{\"notice\":\"Validator to stake after being whitelisted to take part in bridge operations\"},\"unstake()\":{\"notice\":\"a signal to the network that the validator is planning to withdraw their funds from the network. validator would still continue to participate till the validator withdraws\"},\"withdraw()\":{\"notice\":\"allows validator to withdraw their funds once withdrawLockPeriod has passed\"}},\"notice\":\"this contract is part of the bridge ecosystem and has to be deployed on the source chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363636393532373138333534\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07cf8d783adf28649b2ec21c55dd14941b5c779e87d19b6233fa1cb0debe2f71\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9720545d8ea1f76222f98683f861f919e9c28bd5d5503caa7e3620a21b6aaa24\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/Storage/BridgeStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.15;\\n\\nimport \\\"./../library/Structs.sol\\\";\\n\\ncontract BridgeStorage {\\n    mapping(address => uint32) public validatorIds;\\n    mapping(uint32 => Structs.Validator) public validators;\\n    mapping(address => Structs.Lock) public locks;\\n\\n    mapping(uint256 => uint256) public modeChange;\\n    // validatorAddress => bool\\n    mapping(address => bool) public whitelistedAddresses;\\n\\n    // dynasty => epoch => signerAddress\\n    mapping(uint256 => mapping(uint256 => address)) public signerAddressPerDynasty;\\n    // validatorId => dynasty => epoch => signerAttestation\\n    mapping(uint32 => mapping(uint256 => mapping(uint256 => Structs.SignerAttestation))) public signerAttestations;\\n    // dynasty => epoch => signerAddresses attested this dynasty\\n    mapping(uint256 => mapping(uint256 => address[])) public attestedSignerAddress;\\n    // dynasty => epoch => signerAddress => numVotes\\n    mapping(uint256 => mapping(uint256 => mapping(address => uint256))) public signerVotesPerAttestation;\\n\\n    // requestId => request\\n    mapping(uint256 => Structs.Request) public requests;\\n\\n    mapping(uint256 => mapping(uint256 => uint32[])) public blockIdsConfirmed;\\n    mapping(uint32 => Structs.Block) public blocks;\\n\\n    uint32 public numValidators;\\n    uint32 public numWhitelisted;\\n    uint256 public firstDynastyCreation;\\n    uint32 public numRequests;\\n    uint32 public numRequestsFulfilled;\\n    uint32 public numBlocksCreated;\\n}\\n\",\"keccak256\":\"0xc17a1dde8f3934e15d69f9e377c11984daff34a73af3bbdbd9b8f712c7403ddf\",\"license\":\"UNLICENSED\"},\"src/Storage/Parameters.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.15;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\\\";\\n\\ncontract Parameters is AccessControl {\\n    enum EpochMode {\\n        SignerCreation,\\n        Signing\\n    }\\n\\n    uint256 public epochLength = 1200;\\n\\n    uint256 public dynastyLength = 100;\\n\\n    uint256 public minStake = 1000 * (10 ** 18);\\n\\n    uint16 public withdrawLockPeriod = 1;\\n\\n    uint32 public numParticipants = 10;\\n\\n    uint32 public threshold = 8;\\n\\n    function setNumParticipantsAndThreshold(uint32 _numParticipants, uint32 _threshold) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_threshold < _numParticipants, \\\"invalid updation\\\");\\n        numParticipants = _numParticipants;\\n        threshold = _threshold;\\n    }\\n\\n    function setMinStake(uint256 _minStake) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        minStake = _minStake;\\n    }\\n\\n    function setWithdrawLockPeriod(uint16 _withdrawLockPeriod) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        withdrawLockPeriod = _withdrawLockPeriod;\\n    }\\n\\n    function setDynastyLength(uint256 _dynastyLength) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        dynastyLength = _dynastyLength;\\n    }\\n\\n    function setEpochLength(uint256 _epochLength) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        epochLength = _epochLength;\\n    }\\n}\\n\",\"keccak256\":\"0x98d9c29a65387434e436010bd9cb90e8f0c0261e0aa940a25bd6293cbcaeb430\",\"license\":\"UNLICENSED\"},\"src/core/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.15;\\n\\nimport \\\"../Storage/Parameters.sol\\\";\\nimport \\\"../Storage/BridgeStorage.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @notice this contract is part of the bridge ecosystem and has to be deployed on the source chain\\n */\\ncontract Bridge is BridgeStorage, Parameters, Initializable {\\n    IERC20 public bridgeToken;\\n\\n    /**\\n     * @dev Emitted when there has been a call to createRequest. Can only be called by the admin\\n     * @param numRequests number of requests so far (requestId)\\n     * @param requestValues Struct of values submitted consists of (int8 power,uint16 collectionId,bytes32 name,uint256 value)\\n     * @param requesterAddress address of the createRequest caller\\n     */\\n    event CreatedRequest(\\n        uint32 numRequests, Structs.Value[] requestValues, address indexed requesterAddress, uint256 indexed epoch, uint256 dynasty\\n    );\\n\\n    /**\\n     * @dev Emitted when an address is whitelisted by admin\\n     * @param validatorAddress address of the validator\\n     * @param status is address whitelisted or not\\n     * @param numWhitelisted number of whitelisted addresses\\n     */\\n    event SetWhitelist(address indexed validatorAddress, bool status, uint32 numWhitelisted);\\n\\n    /**\\n     * @dev Emitted when signerVotesPerAttestation in current dynasty has votes more than the required threshold for the\\n     * current signerAddress.\\n     * @param mode signing mode\\n     * @param epoch current epoch mode change occurred\\n     * @param dynasty current dynasty mode change occurred\\n     * @param signerAddress address attested by all validators\\n     */\\n    event SigningFulfilled(uint8 mode, uint256 indexed epoch, uint256 dynasty, address indexed signerAddress);\\n\\n    /**\\n     * @dev Emitted when a validator tries to attest signerAddress for the first time.\\n     * @param signerAddress address attested by all validators\\n     * @param validatorId ID of the validator from the active set of validators\\n     * @param sender caller of the attestSigner\\n     * @param epoch current epoch of attestSigner\\n     * @param dynasty current dynasty of attestSigner\\n     */\\n    event AttestSigner(address signerAddress, uint32 indexed validatorId, address sender, uint256 indexed epoch, uint256 dynasty);\\n\\n    /**\\n     * @dev Emitted when a block is successfully created and finalized.\\n     * @param signature with which the message is signed\\n     * @param signerAddress address of the public signer address\\n     * @param messageData the data being finalized\\n     * @param sender caller of finalizeRequest ie, finalizing address\\n     * @param epoch current epoch of finalizeRequest\\n     * @param dynasty current dynasty of finalizeRequest\\n     */\\n    event FinalizeRequest(\\n        bytes signature,\\n        address signerAddress,\\n        bytes messageData,\\n        address indexed sender,\\n        uint256 indexed epoch,\\n        uint256 dynasty\\n    );\\n\\n    /**\\n     * @dev Emitted when a whitelisted address has staked RAZOR tokens.\\n     * @param amount staked by validator\\n     * @param validator address\\n     * @param validatorId ID of given validator address\\n     * @param epoch current epoch validator has staked in\\n     * @param dynasty current dynasty validator has staked in\\n     */\\n    event Staked(uint256 amount, address validator, uint32 indexed validatorId, uint256 indexed epoch, uint256 dynasty);\\n\\n    /**\\n     * @dev Emitted when a whitelisted address has unstaked RAZOR tokens.\\n     * @param validator address\\n     * @param validatorId ID of given validator address\\n     * @param epoch current epoch validator has unstaked in\\n     * @param dynasty current dynasty validator has unstaked in\\n     */\\n    event Unstaked(address validator, uint32 indexed validatorId, uint256 indexed epoch, uint256 dynasty);\\n\\n    /**\\n     * @dev Emitted when a whitelisted address has withdrawn RAZOR tokens.\\n     * @param validator address\\n     * @param validatorId ID of given validator address\\n     * @param mode current mode\\n     * @param epoch current epoch validator has unstaked in\\n     * @param dynasty current dynasty validator has unstaked in\\n     */\\n    event Withdraw(address validator, uint32 indexed validatorId, uint8 mode, uint256 indexed epoch, uint256 dynasty);\\n\\n    constructor() {\\n        firstDynastyCreation = block.timestamp;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice creates a request that is to be fulfilled by the bridge node\\n     * @param requestValues values to be bridged by the bridge node\\n     */\\n    function createRequest(Structs.Value[] memory requestValues) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        numRequests = numRequests + 1;\\n        bytes memory requestData = abi.encode(requestValues);\\n        requests[numRequests] = Structs.Request(false, numRequests, requestData);\\n        emit CreatedRequest(numRequests, requestValues, msg.sender, getEpoch(), getDynasty());\\n    }\\n    /**\\n     * @notice adding/removing a validator from whitelist to enable/disable staking for the validator address\\n     * @param validatorAddress address of the validator who the admin would set/remove from whitelist\\n     * @param status whitelist status of the validator address\\n     */\\n\\n    function setWhiteList(address validatorAddress, bool status) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        whitelistedAddresses[validatorAddress] = status;\\n        if (status) {\\n            require(numWhitelisted < numParticipants, \\\"maximum numParticipants allowed\\\");\\n            numWhitelisted = numWhitelisted + 1;\\n        } else {\\n            numWhitelisted = numWhitelisted - 1;\\n        }\\n        emit SetWhitelist(validatorAddress, status, numWhitelisted);\\n    }\\n\\n    /**\\n     * @param bridgeTokenAddress The address of the bridge token ERC20 contract\\n     */\\n    function initialize(address bridgeTokenAddress) external initializer onlyRole(DEFAULT_ADMIN_ROLE){\\n        bridgeToken = IERC20(bridgeTokenAddress);\\n    }\\n\\n    /**\\n     * @notice each validator is required to send their attestation of the public key of the\\n     * signer generated in the form of address. Once one of the votes of the signer address exceeds threshold,\\n     * that is set as signer address for the rest of the dynasty\\n     * @param signerAddress address of the signer that is being attested by the validator\\n     */\\n    function attestSigner(address signerAddress) external {\\n        // signer checks\\n        require(getMode() == uint8(EpochMode.SignerCreation), \\\"Incorrect Mode\\\");\\n        uint32 validatorId = validatorIds[msg.sender];\\n        require(validatorId != 0, \\\"Invalid Validator\\\");\\n        require(validators[validatorId].stake == minStake, \\\"stake less than minStake\\\");\\n\\n        uint256 dynasty = getDynasty();\\n        uint256 epoch = getEpoch();\\n        require(signerAttestations[validatorId][dynasty][epoch].validatorId == 0, \\\"Already attested\\\");\\n\\n        // registering vote on public key\\n        if (signerVotesPerAttestation[dynasty][epoch][signerAddress] == 0) {\\n            attestedSignerAddress[dynasty][epoch].push(signerAddress);\\n        }\\n        signerVotesPerAttestation[dynasty][epoch][signerAddress] = signerVotesPerAttestation[dynasty][epoch][signerAddress] + 1;\\n        signerAttestations[validatorId][dynasty][epoch] = Structs.SignerAttestation(validatorId, signerAddress);\\n        emit AttestSigner(signerAddress, validatorId, msg.sender, epoch, dynasty);\\n\\n        if (signerVotesPerAttestation[dynasty][epoch][signerAddress] > threshold && signerAddressPerDynasty[dynasty][epoch] == address(0)) {\\n            signerAddressPerDynasty[dynasty][epoch] = signerAddress;\\n            modeChange[dynasty] = epoch;\\n            emit SigningFulfilled(getMode(), epoch, dynasty, signerAddress);\\n        }\\n    }\\n\\n    /**\\n     * @notice Once the signature has been generated by the bridge nodes for a particular request,\\n     * one of the validators can call this function which will verify the signature created with the message that is to be bridged\\n     * @param signature generated signature by the nodes\\n     * @param messageData the message that is to be bridged. The message has to be encoded and then sent to the contracts.\\n     * Encoding is to be done in the following pattern: epoch(uint256), requestId(uint32), timestamp(uint256), values(Struct.Value[])\\n     * If not followed, the contracts would throw an error\\n     */\\n    function finalizeRequest(bytes calldata signature, bytes calldata messageData) external {\\n        require(getMode() == uint8(EpochMode.Signing), \\\"Incorrect Mode\\\");\\n        uint32 validatorId = validatorIds[msg.sender];\\n        require(validatorId != 0, \\\"Invalid Validator\\\");\\n        require(numRequestsFulfilled < numRequests, \\\"No pending requests to fulfil\\\");\\n\\n        uint256 dynasty = getDynasty();\\n        require(signerAttestations[validatorId][dynasty][modeChange[dynasty]].validatorId != 0, \\\"signer attestation not done\\\");\\n\\n        uint256 epoch = getEpoch();\\n        (uint256 _epoch, uint32 requestId,, Structs.Value[] memory values) =\\n            abi.decode(messageData, (uint256, uint32, uint256, Structs.Value[]));\\n\\n        require(_epoch == epoch, \\\"invalid epoch in message data\\\");\\n        require(requestId != 0, \\\"requestId cant be 0\\\");\\n        require(!requests[requestId].fulfilled, \\\"Request Already fulfilled\\\");\\n        require(values.length != 0, \\\"no values in the block\\\");\\n        if (requestId != 1) require(requests[requestId - 1].fulfilled, \\\"previous request not fulfilled\\\");\\n        bytes32 messageHash = keccak256(messageData);\\n        require(ECDSA.recover(messageHash, signature) == signerAddressPerDynasty[dynasty][modeChange[dynasty]], \\\"invalid signature\\\");\\n\\n        bytes32 blockHash = keccak256(abi.encodePacked(messageData, signature));\\n        if (blockIdsConfirmed[dynasty][epoch].length != 0) {\\n            require(blocks[numBlocksCreated].blockHash != blockHash, \\\"block contents already confirmed\\\");\\n        }\\n\\n        numBlocksCreated = numBlocksCreated + 1;\\n        numRequestsFulfilled = numRequestsFulfilled + 1;\\n        blocks[numBlocksCreated].blockHash = blockHash;\\n        blocks[numBlocksCreated].message = messageData;\\n        blocks[numBlocksCreated].signature = signature;\\n        blockIdsConfirmed[dynasty][epoch].push(numBlocksCreated);\\n        requests[requestId].fulfilled = true;\\n        emit FinalizeRequest(signature, signerAddressPerDynasty[dynasty][modeChange[dynasty]], messageData, msg.sender, epoch, dynasty);\\n    }\\n\\n    /**\\n     * @notice Validator to stake after being whitelisted to take part in bridge operations\\n     * @param amount The amount to be staked\\n     */\\n    function stake(uint256 amount) external {\\n        require(amount == minStake, \\\"not equal to minStake\\\");\\n        require(validatorIds[msg.sender] == 0, \\\"already a validator\\\");\\n        require(whitelistedAddresses[msg.sender], \\\"Address not whitelisted\\\");\\n        numValidators = numValidators + 1;\\n        validatorIds[msg.sender] = numValidators;\\n        validators[numValidators] = Structs.Validator(numValidators, msg.sender, amount);\\n        emit Staked(amount, msg.sender, validatorIds[msg.sender], getEpoch(), getDynasty());\\n        require(bridgeToken.transferFrom(msg.sender, address(this), amount), \\\"transferred failed\\\");\\n    }\\n\\n    /**\\n     * @notice a signal to the network that the validator is planning to withdraw their funds from the network.\\n     * validator would still continue to participate till the validator withdraws\\n     */\\n    function unstake() external {\\n        uint32 validatorId = validatorIds[msg.sender];\\n        require(validatorId != 0, \\\"Invalid Validator\\\");\\n        require(locks[msg.sender].unlockAfter == 0, \\\"Existing withdraw lock\\\");\\n\\n        uint256 dynasty = getDynasty();\\n        locks[msg.sender] = Structs.Lock(validators[validatorId].stake, dynasty + withdrawLockPeriod);\\n        emit Unstaked(msg.sender, validatorId, getEpoch(), dynasty);\\n    }\\n\\n    /**\\n     * @notice allows validator to withdraw their funds once withdrawLockPeriod has passed\\n     */\\n    function withdraw() external {\\n        uint32 validatorId = validatorIds[msg.sender];\\n        require(validatorId != 0, \\\"Invalid Validator\\\");\\n        require(locks[msg.sender].unlockAfter != 0, \\\"No withdraw lock\\\");\\n        require(getMode() == uint8(EpochMode.SignerCreation), \\\"Incorrect Mode\\\");\\n\\n        uint256 dynasty = getDynasty();\\n        uint256 epoch = getEpoch();\\n        require(signerAttestations[validatorId][dynasty][epoch].validatorId == 0, \\\"already attested signer\\\");\\n        require(signerAddressPerDynasty[dynasty][epoch] == address(0), \\\"Cant withdraw if signer set\\\");\\n\\n        require(dynasty >= locks[msg.sender].unlockAfter, \\\"invalid withdraw request\\\");\\n\\n        uint256 withdrawAmount = locks[msg.sender].amount;\\n        validators[validatorId].stake = 0;\\n        locks[msg.sender] = Structs.Lock(0, 0);\\n        emit Withdraw(msg.sender, validatorId, getMode(), epoch, dynasty);\\n        require(bridgeToken.transfer(msg.sender, withdrawAmount), \\\"transferred failed\\\");\\n    }\\n\\n    /**\\n     * @param validatorId id of the validator whose signer attestion we want to fetcj\\n     * @return the Struct of the signer attestation\\n     */\\n    function getSignerAttestation(uint256 dynasty, uint256 epoch, uint32 validatorId)\\n        external\\n        view\\n        returns (Structs.SignerAttestation memory)\\n    {\\n        return signerAttestations[validatorId][dynasty][epoch];\\n    }\\n\\n    /**\\n     * @param requestId the id of the request\\n     * @return request the Struct of the request information\\n     */\\n    function getRequest(uint32 requestId) external view returns (Structs.Request memory) {\\n        return requests[requestId];\\n    }\\n\\n    /**\\n     * @return The validator ID\\n     */\\n    function getValidatorId() external view returns (uint32) {\\n        return validatorIds[msg.sender];\\n    }\\n\\n    /**\\n     * @param validatorId ID of the validator\\n     * @return stake of validator\\n     */\\n    function getStake(uint32 validatorId) external view returns (uint256) {\\n        return validators[validatorId].stake;\\n    }\\n\\n    /**\\n     * @param validatorId The validator ID\\n     * @return validator The Struct of validator information\\n     */\\n    function getValidator(uint32 validatorId) external view returns (Structs.Validator memory validator) {\\n        return validators[validatorId];\\n    }\\n\\n    /**\\n     * @notice return the struct of the confirmed block\\n     * @param blockId id of the block\\n     * @return _block : struct of the confirmed block\\n     */\\n    function getBlock(uint32 blockId) external view returns (Structs.Block memory) {\\n        return blocks[blockId];\\n    }\\n\\n    /**\\n     * @notice returns an array of blockIds confirmed in specified epoch of the dynasty\\n     * @return blockIds array of blockIds confirmed\\n     */\\n    function getBlockIdsConfirmed(uint256 dynasty, uint256 epoch) external view returns (uint32[] memory) {\\n        return blockIdsConfirmed[dynasty][epoch];\\n    }\\n\\n    /**\\n     * @return the value of current dynasty\\n     */\\n    function getDynasty() public view returns (uint256) {\\n        return ((block.timestamp - firstDynastyCreation) / (dynastyLength * epochLength)) + 1;\\n    }\\n\\n    /**\\n     * @return the value of current epoch in the dynasty\\n     */\\n    function getEpoch() public view returns (uint256) {\\n        return (((block.timestamp - firstDynastyCreation) / epochLength) % dynastyLength) + 1;\\n    }\\n\\n    /**\\n     * @return mode the value of current mode we are in the dynasty\\n     */\\n    function getMode() public view returns (uint8 mode) {\\n        uint256 dynasty = getDynasty();\\n        uint256 epoch = getEpoch();\\n        if (modeChange[dynasty] == 0 || modeChange[dynasty] == epoch) {\\n            return uint8(EpochMode.SignerCreation);\\n        } else {\\n            return uint8(EpochMode.Signing);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x294319e25a9ec13e84233e8e8b56713f6a5fc1698aa6d2a46dccf8e7a2a599b1\",\"license\":\"UNLICENSED\"},\"src/library/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.15;\\n\\nlibrary Structs {\\n    struct Validator {\\n        uint32 id;\\n        address _validatorAddress;\\n        uint256 stake;\\n    }\\n\\n    struct Lock {\\n        uint256 amount;\\n        uint256 unlockAfter;\\n    }\\n\\n    struct SignerAttestation {\\n        uint32 validatorId;\\n        address signerAddress;\\n    }\\n\\n    struct Request {\\n        bool fulfilled;\\n        uint32 requestId;\\n        bytes requestData;\\n    }\\n\\n    struct Block {\\n        bytes32 blockHash;\\n        bytes message;\\n        bytes signature;\\n    }\\n\\n    struct Value {\\n        int8 power;\\n        uint16 collectionId;\\n        bytes32 name;\\n        uint256 value;\\n    }\\n}\\n\",\"keccak256\":\"0xaefbff4e65fb7783f64459bb78f0643ef94b44c02b1f7ef953a6430ae0ed0d0f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040526104b06010556064601155683635c9adc5dea00000601255601380546001600160501b03191666080000000a00011790553480156200004257600080fd5b5042600d55620000546000336200005a565b6200010e565b6200006682826200006a565b5050565b6000828152600f602090815260408083206001600160a01b038516845290915290205460ff1662000066576000828152600f602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620000ca3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b613a91806200011e6000396000f3fe608060405234801561001057600080fd5b506004361061035c5760003560e01c80637fd3dbae116101d3578063a92e34be11610104578063c4d66de8116100a2578063dba9de6b1161007c578063dba9de6b14610a12578063e995831414610a1a578063f4734b0c14610a3a578063fd48577e14610a5457600080fd5b8063c4d66de814610945578063c533b1da14610958578063d547741f146109ff57600080fd5b8063ad8db689116100de578063ad8db689146108ed578063b01ba62414610904578063b49d43761461091f578063b829ea591461093257600080fd5b8063a92e34be146108a1578063a999c015146108b4578063aa241a88146108da57600080fd5b80639a6e9a2411610171578063a14effce1161014b578063a14effce1461086a578063a217fddf1461087d578063a694fc3a14610885578063a8ccdfe71461089857600080fd5b80639a6e9a24146107dd5780639b85b0fb146108475780639fb42b1f1461085a57600080fd5b80638d14e127116101ad5780638d14e1271461074b5780638ebbddc01461075e57806391d148541461077e57806393964fef1461079157600080fd5b80637fd3dbae146106a957806381d12c58146107165780638c80fd901461073857600080fd5b80633c4ad776116102ad578063559bf2191161024b5780635d593f8d116102255780635d593f8d146106245780635de9a13714610634578063757991a8146106705780637777476d1461067857600080fd5b8063559bf219146105e657806357d775f8146105f95780635cd0783e1461060257600080fd5b80634b4fd03b116102875780634b4fd03b1461058c5780634e76a846146105a657806354dacb96146105bc57806354eea796146105d357600080fd5b80633c4ad776146105415780633ccfd60b1461056d57806342cde4e81461057557600080fd5b80632628490f1161031a5780632def6620116102f45780632def6620146105085780632f2ff15d1461051257806336568abe14610525578063375b3c0a1461053857600080fd5b80632628490f1461043057806327289b6d146104515780632dd29b901461047157600080fd5b8062dd99811461036157806301ffc9a71461039e578063055e326a146103c157806306c933d8146103ca5780631bea14e9146103ed578063248a9ca31461040d575b600080fd5b61038b61036f366004612e98565b63ffffffff166000908152600160208190526040909120015490565b6040519081526020015b60405180910390f35b6103b16103ac366004612eb3565b610a67565b6040519015158152602001610395565b61038b600d5481565b6103b16103d8366004612ef4565b60046020526000908152604090205460ff1681565b6104006103fb366004612e98565b610a9e565b6040516103959190612f67565b61038b61041b366004612fb3565b6000908152600f602052604090206001015490565b60135461043e9061ffff1681565b60405161ffff9091168152602001610395565b61038b61045f366004612fb3565b60036020526000908152604090205481565b6104de61047f366004612fcc565b6040805180820182526000808252602091820181905263ffffffff938416815260068252828120958152948152818520938552928352928390208351808501909452549081168352600160201b90046001600160a01b03169082015290565b60408051825163ffffffff1681526020928301516001600160a01b03169281019290925201610395565b610510610c0b565b005b610510610520366004613001565b610d58565b610510610533366004613001565b610d82565b61038b60125481565b600e5461055890600160401b900463ffffffff1681565b60405163ffffffff9091168152602001610395565b610510610e00565b60135461055890600160301b900463ffffffff1681565b610594611185565b60405160ff9091168152602001610395565b6013546105589062010000900463ffffffff1681565b600c5461055890600160201b900463ffffffff1681565b6105106105e1366004612fb3565b6111dd565b6105106105f4366004612ef4565b6111ee565b61038b60105481565b610615610610366004612e98565b6115ad565b6040516103959392919061302d565b600c546105589063ffffffff1681565b61065b610642366004612ef4565b6002602052600090815260409020805460019091015482565b60408051928352602083019190915201610395565b61038b6116e0565b61038b610686366004613062565b600860209081526000938452604080852082529284528284209052825290205481565b6106f26106b736600461308e565b600660209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160a01b031682565b6040805163ffffffff90931683526001600160a01b03909116602083015201610395565b610729610724366004612fb3565b61171a565b604051610395939291906130c1565b610510610746366004612fb3565b61174d565b6105106107593660046130f6565b61175e565b61077161076c36600461312d565b6118d8565b604051610395919061314f565b6103b161078c366004613001565b61196f565b6107c561079f36600461312d565b60056020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b039091168152602001610395565b61081d6107eb366004612e98565b6001602081905260009182526040909120805491015463ffffffff821691600160201b90046001600160a01b03169083565b6040805163ffffffff90941684526001600160a01b03909216602084015290820152606001610395565b610510610855366004613199565b61199a565b600e546105589063ffffffff1681565b610510610878366004613205565b611a35565b61038b600081565b610510610893366004612fb3565b612137565b61038b60115481565b6105586108af366004613271565b61240f565b6105586108c2366004612ef4565b60006020819052908152604090205463ffffffff1681565b6107c56108e8366004613271565b612465565b600e5461055890600160201b900463ffffffff1681565b3360009081526020819052604090205463ffffffff16610558565b61051061092d366004612fb3565b6124aa565b6105106109403660046132af565b6124bb565b610510610953366004612ef4565b6124df565b6109ce610966366004612e98565b60408051606081018252600080825260208201819052918101919091525063ffffffff908116600090815260016020818152604092839020835160608101855281549586168152600160201b9095046001600160a01b03169185019190915201549082015290565b60408051825163ffffffff1681526020808401516001600160a01b0316908201529181015190820152606001610395565b610510610a0d366004613001565b612634565b61038b612659565b610a2d610a28366004612e98565b612682565b60405161039591906132ca565b6013546107c590600160601b90046001600160a01b031681565b610510610a62366004613448565b6126e7565b60006001600160e01b03198216637965db0b60e01b1480610a9857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60408051606080820183526000808352602080840183905283850183905263ffffffff86168252600b8152908490208451928301909452835482526001840180549394929391840191610af09061347d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1c9061347d565b8015610b695780601f10610b3e57610100808354040283529160200191610b69565b820191906000526020600020905b815481529060010190602001808311610b4c57829003601f168201915b50505050508152602001600282018054610b829061347d565b80601f0160208091040260200160405190810160405280929190818152602001828054610bae9061347d565b8015610bfb5780601f10610bd057610100808354040283529160200191610bfb565b820191906000526020600020905b815481529060010190602001808311610bde57829003601f168201915b5050505050815250509050919050565b3360009081526020819052604081205463ffffffff1690819003610c4a5760405162461bcd60e51b8152600401610c41906134b7565b60405180910390fd5b3360009081526002602052604090206001015415610ca35760405162461bcd60e51b81526020600482015260166024820152754578697374696e67207769746864726177206c6f636b60501b6044820152606401610c41565b6000610cad612659565b60408051808201825263ffffffff851660009081526001602081815293909120015481526013549293509190820190610cea9061ffff16846134f8565b905233600090815260026020908152604090912082518155910151600190910155610d136116e0565b604080513381526020810184905263ffffffff8516917fa99f1e995421e45087421580e011e67f5c602c191093ee1276fcc0aa8d12299c910160405180910390a35050565b6000828152600f6020526040902060010154610d738161280c565b610d7d8383612816565b505050565b6001600160a01b0381163314610df25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c41565b610dfc828261289c565b5050565b3360009081526020819052604081205463ffffffff1690819003610e365760405162461bcd60e51b8152600401610c41906134b7565b336000908152600260205260408120600101549003610e8a5760405162461bcd60e51b815260206004820152601060248201526f4e6f207769746864726177206c6f636b60801b6044820152606401610c41565b6000610e94611185565b60ff1614610eb45760405162461bcd60e51b8152600401610c4190613526565b6000610ebe612659565b90506000610eca6116e0565b63ffffffff808516600090815260066020908152604080832087845282528083208584529091529020549192501615610f455760405162461bcd60e51b815260206004820152601760248201527f616c7265616479206174746573746564207369676e65720000000000000000006044820152606401610c41565b60008281526005602090815260408083208484529091529020546001600160a01b031615610fb55760405162461bcd60e51b815260206004820152601b60248201527f43616e74207769746864726177206966207369676e65722073657400000000006044820152606401610c41565b336000908152600260205260409020600101548210156110175760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207769746864726177207265717565737400000000000000006044820152606401610c41565b336000818152600260208181526040808420805463ffffffff8a168087526001808652848820810188905584518086019095528785528486018881529789905295909452915181559351929093019190915590918391907fa671b0823d8c347e26c9f35c84444a1c45846c504c636c4ca4e4039818e4055490611098611185565b604080516001600160a01b03909316835260ff9091166020830152810187905260600160405180910390a360135460405163a9059cbb60e01b815233600482015260248101839052600160601b9091046001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113e919061354e565b61117f5760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c9c99590819985a5b195960721b6044820152606401610c41565b50505050565b600080611190612659565b9050600061119c6116e0565b60008381526003602052604090205490915015806111c7575060008281526003602052604090205481145b156111d65760005b9250505090565b60016111cf565b60006111e88161280c565b50601055565b60006111f8611185565b60ff16146112185760405162461bcd60e51b8152600401610c4190613526565b3360009081526020819052604081205463ffffffff169081900361124e5760405162461bcd60e51b8152600401610c41906134b7565b60125463ffffffff821660009081526001602081905260409091200154146112b85760405162461bcd60e51b815260206004820152601860248201527f7374616b65206c657373207468616e206d696e5374616b6500000000000000006044820152606401610c41565b60006112c2612659565b905060006112ce6116e0565b63ffffffff80851660009081526006602090815260408083208784528252808320858452909152902054919250161561133c5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48185d1d195cdd195960821b6044820152606401610c41565b600082815260086020908152604080832084845282528083206001600160a01b038816845290915281205490036113ad57600082815260076020908152604080832084845282528220805460018101825590835291200180546001600160a01b0319166001600160a01b0386161790555b600082815260086020908152604080832084845282528083206001600160a01b03881684529091529020546113e39060016134f8565b600083815260086020908152604080832085845282528083206001600160a01b03898116808652918452828520959095558151808301835263ffffffff898116808352828601848152818852600687528588208b895287528588208a895287529685902092518354975192166001600160c01b031990971696909617600160201b91909716029590951790945580519384523391840191909152820184905282917f44afcd709ba4a8f8e62f4b60e6bbaef1157875590dcd272e9cc5d9e59d5eb2ff9060600160405180910390a3601354600083815260086020908152604080832085845282528083206001600160a01b0389168452909152902054600160301b90910463ffffffff1610801561151a575060008281526005602090815260408083208484529091529020546001600160a01b0316155b1561117f576000828152600560209081526040808320848452825280832080546001600160a01b0319166001600160a01b0389169081179091558584526003909252909120829055817f53606917df156d9f02538caffa318589cd6bcc542b5e4892e3cc004f2527017661158c611185565b6040805160ff9092168252602082018790520160405180910390a350505050565b600b60205260009081526040902080546001820180549192916115cf9061347d565b80601f01602080910402602001604051908101604052809291908181526020018280546115fb9061347d565b80156116485780601f1061161d57610100808354040283529160200191611648565b820191906000526020600020905b81548152906001019060200180831161162b57829003601f168201915b50505050509080600201805461165d9061347d565b80601f01602080910402602001604051908101604052809291908181526020018280546116899061347d565b80156116d65780601f106116ab576101008083540402835291602001916116d6565b820191906000526020600020905b8154815290600101906020018083116116b957829003601f168201915b5050505050905083565b6000601154601054600d54426116f6919061356b565b6117009190613598565b61170a91906135ac565b6117159060016134f8565b905090565b6009602052600090815260409020805460018201805460ff83169361010090930463ffffffff1692919061165d9061347d565b60006117588161280c565b50601255565b60006117698161280c565b6001600160a01b0383166000908152600460205260409020805460ff1916831580159190911790915561184157601354600c546201000090910463ffffffff908116600160201b90920416106118015760405162461bcd60e51b815260206004820152601f60248201527f6d6178696d756d206e756d5061727469636970616e747320616c6c6f776564006044820152606401610c41565b600c5461181c90600160201b900463ffffffff1660016135c0565b600c60046101000a81548163ffffffff021916908363ffffffff16021790555061187e565b600c5461185d90600190600160201b900463ffffffff166135e8565b600c60046101000a81548163ffffffff021916908363ffffffff1602179055505b600c54604080518415158152600160201b90920463ffffffff1660208301526001600160a01b038516917f35647d40e5f4c4e92efee24c066ed3682ffdcac7142e44f6439cabbc3494475e910160405180910390a2505050565b6000828152600a6020908152604080832084845282529182902080548351818402810184019094528084526060939283018282801561196257602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116119255790505b5050505050905092915050565b6000918252600f602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006119a58161280c565b8263ffffffff168263ffffffff16106119f35760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b2103ab83230ba34b7b760811b6044820152606401610c41565b506013805469ffffffffffffffff000019166201000063ffffffff9485160269ffffffff000000000000191617600160301b9290931691909102919091179055565b6001611a3f611185565b60ff1614611a5f5760405162461bcd60e51b8152600401610c4190613526565b3360009081526020819052604081205463ffffffff1690819003611a955760405162461bcd60e51b8152600401610c41906134b7565b600e5463ffffffff808216600160201b9092041610611af65760405162461bcd60e51b815260206004820152601d60248201527f4e6f2070656e64696e6720726571756573747320746f2066756c66696c0000006044820152606401610c41565b6000611b00612659565b63ffffffff808416600090815260066020908152604080832085845282528083206003835281842054845290915281205492935091169003611b845760405162461bcd60e51b815260206004820152601b60248201527f7369676e6572206174746573746174696f6e206e6f7420646f6e6500000000006044820152606401610c41565b6000611b8e6116e0565b905060008080611ba08789018961360d565b93505092509250838314611bf65760405162461bcd60e51b815260206004820152601d60248201527f696e76616c69642065706f636820696e206d65737361676520646174610000006044820152606401610c41565b8163ffffffff16600003611c425760405162461bcd60e51b815260206004820152601360248201527207265717565737449642063616e74206265203606c1b6044820152606401610c41565b63ffffffff821660009081526009602052604090205460ff1615611ca85760405162461bcd60e51b815260206004820152601960248201527f5265717565737420416c72656164792066756c66696c6c6564000000000000006044820152606401610c41565b8051600003611cf25760405162461bcd60e51b81526020600482015260166024820152756e6f2076616c75657320696e2074686520626c6f636b60501b6044820152606401610c41565b8163ffffffff16600114611d755760096000611d0f6001856135e8565b63ffffffff16815260208101919091526040016000205460ff16611d755760405162461bcd60e51b815260206004820152601e60248201527f70726576696f75732072657175657374206e6f742066756c66696c6c656400006044820152606401610c41565b60008888604051611d8792919061366e565b604080519182900382206000898152600560209081528382206003825284832054835281529083902054601f8f018290048202850182019093528d84529093506001600160a01b0390911691611dfa918491908f908f908190840183828082843760009201919091525061290392505050565b6001600160a01b031614611e445760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610c41565b600089898d8d604051602001611e5d949392919061367e565b60408051601f19818403018152918152815160209283012060008a8152600a84528281208a825290935291205490915015611f0057600e54600160401b900463ffffffff166000908152600b6020526040902054819003611f005760405162461bcd60e51b815260206004820181905260248201527f626c6f636b20636f6e74656e747320616c726561647920636f6e6669726d65646044820152606401610c41565b600e54611f1b90600160401b900463ffffffff1660016135c0565b600e80546bffffffff00000000000000001916600160401b63ffffffff938416021790819055611f5591600160201b9091041660016135c0565b600e805467ffffffff000000001916600160201b63ffffffff9384160217808255600160401b9081900483166000908152600b602052604080822086905592549190910490921682529020600101611fae8a8c836136ee565b50600e54600160401b900463ffffffff166000908152600b60205260409020600201611fdb8c8e836136ee565b50600a60008881526020019081526020016000206000878152602001908152602001600020600e60089054906101000a900463ffffffff1690806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff1602179055506001600960008663ffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555085336001600160a01b03167fe78ab702f00760a3b3a89d68435e59474a455d2027883c0df5660521dc3193be8e8e600560008d81526020019081526020016000206000600360008f815260200190815260200160002054815260200190815260200160002060009054906101000a90046001600160a01b03168f8f8e604051612121969594939291906137d8565b60405180910390a3505050505050505050505050565b60125481146121805760405162461bcd60e51b81526020600482015260156024820152746e6f7420657175616c20746f206d696e5374616b6560581b6044820152606401610c41565b3360009081526020819052604090205463ffffffff16156121d95760405162461bcd60e51b815260206004820152601360248201527230b63932b0b23c9030903b30b634b230ba37b960691b6044820152606401610c41565b3360009081526004602052604090205460ff166122385760405162461bcd60e51b815260206004820152601760248201527f41646472657373206e6f742077686974656c69737465640000000000000000006044820152606401610c41565b600c5461224c9063ffffffff1660016135c0565b600c805463ffffffff92831663ffffffff19918216811783553360008181526020818152604080832080549096169094179094558251606081018452945486168086528585019283528584018881529082526001948590529290209351845491516001600160a01b0316600160201b026001600160c01b031990921695169490941793909317825591519101556122e16116e0565b3360008181526020819052604090205463ffffffff16907fe50d80170d4417b966da72323d10dea631cd643edd45179edd41194828fded73908490612324612659565b604080519384526001600160a01b0390921660208401529082015260600160405180910390a36013546040516323b872dd60e01b815233600482015230602482015260448101839052600160601b9091046001600160a01b0316906323b872dd906064016020604051808303816000875af11580156123a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cb919061354e565b61240c5760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c9c99590819985a5b195960721b6044820152606401610c41565b50565b600a602052826000526040600020602052816000526040600020818154811061243757600080fd5b906000526020600020906008918282040191900660040292509250509054906101000a900463ffffffff1681565b6007602052826000526040600020602052816000526040600020818154811061248d57600080fd5b6000918252602090912001546001600160a01b0316925083915050565b60006124b58161280c565b50601155565b60006124c68161280c565b506013805461ffff191661ffff92909216919091179055565b601354600160581b900460ff161580801561250757506013546001600160501b90910460ff16105b806125285750303b1580156125285750601354600160501b900460ff166001145b61258b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c41565b6013805460ff60501b1916600160501b17905580156125b8576013805460ff60581b1916600160581b1790555b60006125c38161280c565b50601380546bffffffffffffffffffffffff16600160601b6001600160a01b038516021790558015610dfc576013805460ff60581b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6000828152600f602052604090206001015461264f8161280c565b610d7d838361289c565b600060105460115461266b9190613822565b600d54612678904261356b565b61170a9190613598565b60408051606080820183526000808352602080840182905283850183905263ffffffff8681168352600982529185902085519384018652805460ff811615158552610100900490921690830152600181018054939492939192840191610b829061347d565b60006126f28161280c565b600e546127069063ffffffff1660016135c0565b600e805463ffffffff191663ffffffff929092169190911790556040516000906127349084906020016138a4565b60408051808303601f190181526060830182526000808452600e5463ffffffff908116602080870182815287870186815292855260099091529490922085518154955164ffffffffff1990961690151564ffffffff0019161761010095909216949094021783555190935060018201906127ae90826138b7565b509050506127ba6116e0565b600e5433907f82eeb9f13dcbab60eaf396da72ce4714ecf8a0e4133f5aa0ea425378491675099063ffffffff16866127f0612659565b6040516127ff93929190613977565b60405180910390a3505050565b61240c8133612927565b612820828261196f565b610dfc576000828152600f602090815260408083206001600160a01b03851684529091529020805460ff191660011790556128583390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6128a6828261196f565b15610dfc576000828152600f602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008060006129128585612980565b9150915061291f816129ee565b509392505050565b612931828261196f565b610dfc5761293e81612ba4565b612949836020612bb6565b60405160200161295a9291906139a6565b60408051601f198184030181529082905262461bcd60e51b8252610c4191600401613a1b565b60008082516041036129b65760208301516040840151606085015160001a6129aa87828585612d59565b945094505050506129e7565b82516040036129df57602083015160408401516129d4868383612e46565b9350935050506129e7565b506000905060025b9250929050565b6000816004811115612a0257612a02613510565b03612a0a5750565b6001816004811115612a1e57612a1e613510565b03612a6b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c41565b6002816004811115612a7f57612a7f613510565b03612acc5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c41565b6003816004811115612ae057612ae0613510565b03612b385760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c41565b6004816004811115612b4c57612b4c613510565b0361240c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610c41565b6060610a986001600160a01b03831660145b60606000612bc5836002613822565b612bd09060026134f8565b67ffffffffffffffff811115612be857612be8613309565b6040519080825280601f01601f191660200182016040528015612c12576020820181803683370190505b509050600360fc1b81600081518110612c2d57612c2d613a2e565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612c5c57612c5c613a2e565b60200101906001600160f81b031916908160001a9053506000612c80846002613822565b612c8b9060016134f8565b90505b6001811115612d03576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612cbf57612cbf613a2e565b1a60f81b828281518110612cd557612cd5613a2e565b60200101906001600160f81b031916908160001a90535060049490941c93612cfc81613a44565b9050612c8e565b508315612d525760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c41565b9392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612d905750600090506003612e3d565b8460ff16601b14158015612da857508460ff16601c14155b15612db95750600090506004612e3d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612e0d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612e3657600060019250925050612e3d565b9150600090505b94509492505050565b6000806001600160ff1b03831681612e6360ff86901c601b6134f8565b9050612e7187828885612d59565b935093505050935093915050565b803563ffffffff81168114612e9357600080fd5b919050565b600060208284031215612eaa57600080fd5b612d5282612e7f565b600060208284031215612ec557600080fd5b81356001600160e01b031981168114612d5257600080fd5b80356001600160a01b0381168114612e9357600080fd5b600060208284031215612f0657600080fd5b612d5282612edd565b60005b83811015612f2a578181015183820152602001612f12565b8381111561117f5750506000910152565b60008151808452612f53816020860160208601612f0f565b601f01601f19169290920160200192915050565b60208152815160208201526000602083015160606040840152612f8d6080840182612f3b565b90506040840151601f19848303016060850152612faa8282612f3b565b95945050505050565b600060208284031215612fc557600080fd5b5035919050565b600080600060608486031215612fe157600080fd5b8335925060208401359150612ff860408501612e7f565b90509250925092565b6000806040838503121561301457600080fd5b8235915061302460208401612edd565b90509250929050565b8381526060602082015260006130466060830185612f3b565b82810360408401526130588185612f3b565b9695505050505050565b60008060006060848603121561307757600080fd5b8335925060208401359150612ff860408501612edd565b6000806000606084860312156130a357600080fd5b6130ac84612e7f565b95602085013595506040909401359392505050565b831515815263ffffffff83166020820152606060408201526000612faa6060830184612f3b565b801515811461240c57600080fd5b6000806040838503121561310957600080fd5b61311283612edd565b91506020830135613122816130e8565b809150509250929050565b6000806040838503121561314057600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561318d57835163ffffffff168352928401929184019160010161316b565b50909695505050505050565b600080604083850312156131ac57600080fd5b6131b583612e7f565b915061302460208401612e7f565b60008083601f8401126131d557600080fd5b50813567ffffffffffffffff8111156131ed57600080fd5b6020830191508360208285010111156129e757600080fd5b6000806000806040858703121561321b57600080fd5b843567ffffffffffffffff8082111561323357600080fd5b61323f888389016131c3565b9096509450602087013591508082111561325857600080fd5b50613265878288016131c3565b95989497509550505050565b60008060006060848603121561328657600080fd5b505081359360208301359350604090920135919050565b803561ffff81168114612e9357600080fd5b6000602082840312156132c157600080fd5b612d528261329d565b6020815281511515602082015263ffffffff6020830151166040820152600060408301516060808401526133016080840182612f3b565b949350505050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561334257613342613309565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561337157613371613309565b604052919050565b600082601f83011261338a57600080fd5b8135602067ffffffffffffffff8211156133a6576133a6613309565b6133b4818360051b01613348565b82815260079290921b840181019181810190868411156133d357600080fd5b8286015b8481101561343d57608081890312156133f05760008081fd5b6133f861331f565b8135600081810b8214613409578081fd5b50815261341782860161329d565b8186015260408281013590820152606080830135908201528352918301916080016133d7565b509695505050505050565b60006020828403121561345a57600080fd5b813567ffffffffffffffff81111561347157600080fd5b61330184828501613379565b600181811c9082168061349157607f821691505b6020821081036134b157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526011908201527024b73b30b634b2102b30b634b230ba37b960791b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561350b5761350b6134e2565b500190565b634e487b7160e01b600052602160045260246000fd5b6020808252600e908201526d496e636f7272656374204d6f646560901b604082015260600190565b60006020828403121561356057600080fd5b8151612d52816130e8565b60008282101561357d5761357d6134e2565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826135a7576135a7613582565b500490565b6000826135bb576135bb613582565b500690565b600063ffffffff8083168185168083038211156135df576135df6134e2565b01949350505050565b600063ffffffff83811690831681811015613605576136056134e2565b039392505050565b6000806000806080858703121561362357600080fd5b8435935061363360208601612e7f565b925060408501359150606085013567ffffffffffffffff81111561365657600080fd5b61366287828801613379565b91505092959194509250565b8183823760009101908152919050565b8385823760008482016000815283858237600093019283525090949350505050565b601f821115610d7d57600081815260208120601f850160051c810160208610156136c75750805b601f850160051c820191505b818110156136e6578281556001016136d3565b505050505050565b67ffffffffffffffff83111561370657613706613309565b61371a83613714835461347d565b836136a0565b6000601f84116001811461374e57600085156137365750838201355b600019600387901b1c1916600186901b1783556137a8565b600083815260209020601f19861690835b8281101561377f578685013582556020948501946001909201910161375f565b508682101561379c5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6080815260006137ec60808301888a6137af565b6001600160a01b0387166020840152828103604084015261380e8186886137af565b915050826060830152979650505050505050565b600081600019048311821515161561383c5761383c6134e2565b500290565b60008151808452602080850194508084016000805b848110156138985782518051830b89528481015161ffff16858a0152604080820151908a01526060908101519089015260809097019691830191600101613856565b50959695505050505050565b602081526000612d526020830184613841565b815167ffffffffffffffff8111156138d1576138d1613309565b6138e5816138df845461347d565b846136a0565b602080601f83116001811461391a57600084156139025750858301515b600019600386901b1c1916600185901b1785556136e6565b600085815260208120601f198616915b828110156139495788860151825594840194600190910190840161392a565b50858210156139675787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b63ffffffff841681526060602082015260006139966060830185613841565b9050826040830152949350505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516139de816017850160208801612f0f565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613a0f816028840160208801612f0f565b01602801949350505050565b602081526000612d526020830184612f3b565b634e487b7160e01b600052603260045260246000fd5b600081613a5357613a536134e2565b50600019019056fea26469706673582212206f6ce1d1b7d512e4b5043cbd7050a78bdd072b639049ef8ab59093143555aa0364736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061035c5760003560e01c80637fd3dbae116101d3578063a92e34be11610104578063c4d66de8116100a2578063dba9de6b1161007c578063dba9de6b14610a12578063e995831414610a1a578063f4734b0c14610a3a578063fd48577e14610a5457600080fd5b8063c4d66de814610945578063c533b1da14610958578063d547741f146109ff57600080fd5b8063ad8db689116100de578063ad8db689146108ed578063b01ba62414610904578063b49d43761461091f578063b829ea591461093257600080fd5b8063a92e34be146108a1578063a999c015146108b4578063aa241a88146108da57600080fd5b80639a6e9a2411610171578063a14effce1161014b578063a14effce1461086a578063a217fddf1461087d578063a694fc3a14610885578063a8ccdfe71461089857600080fd5b80639a6e9a24146107dd5780639b85b0fb146108475780639fb42b1f1461085a57600080fd5b80638d14e127116101ad5780638d14e1271461074b5780638ebbddc01461075e57806391d148541461077e57806393964fef1461079157600080fd5b80637fd3dbae146106a957806381d12c58146107165780638c80fd901461073857600080fd5b80633c4ad776116102ad578063559bf2191161024b5780635d593f8d116102255780635d593f8d146106245780635de9a13714610634578063757991a8146106705780637777476d1461067857600080fd5b8063559bf219146105e657806357d775f8146105f95780635cd0783e1461060257600080fd5b80634b4fd03b116102875780634b4fd03b1461058c5780634e76a846146105a657806354dacb96146105bc57806354eea796146105d357600080fd5b80633c4ad776146105415780633ccfd60b1461056d57806342cde4e81461057557600080fd5b80632628490f1161031a5780632def6620116102f45780632def6620146105085780632f2ff15d1461051257806336568abe14610525578063375b3c0a1461053857600080fd5b80632628490f1461043057806327289b6d146104515780632dd29b901461047157600080fd5b8062dd99811461036157806301ffc9a71461039e578063055e326a146103c157806306c933d8146103ca5780631bea14e9146103ed578063248a9ca31461040d575b600080fd5b61038b61036f366004612e98565b63ffffffff166000908152600160208190526040909120015490565b6040519081526020015b60405180910390f35b6103b16103ac366004612eb3565b610a67565b6040519015158152602001610395565b61038b600d5481565b6103b16103d8366004612ef4565b60046020526000908152604090205460ff1681565b6104006103fb366004612e98565b610a9e565b6040516103959190612f67565b61038b61041b366004612fb3565b6000908152600f602052604090206001015490565b60135461043e9061ffff1681565b60405161ffff9091168152602001610395565b61038b61045f366004612fb3565b60036020526000908152604090205481565b6104de61047f366004612fcc565b6040805180820182526000808252602091820181905263ffffffff938416815260068252828120958152948152818520938552928352928390208351808501909452549081168352600160201b90046001600160a01b03169082015290565b60408051825163ffffffff1681526020928301516001600160a01b03169281019290925201610395565b610510610c0b565b005b610510610520366004613001565b610d58565b610510610533366004613001565b610d82565b61038b60125481565b600e5461055890600160401b900463ffffffff1681565b60405163ffffffff9091168152602001610395565b610510610e00565b60135461055890600160301b900463ffffffff1681565b610594611185565b60405160ff9091168152602001610395565b6013546105589062010000900463ffffffff1681565b600c5461055890600160201b900463ffffffff1681565b6105106105e1366004612fb3565b6111dd565b6105106105f4366004612ef4565b6111ee565b61038b60105481565b610615610610366004612e98565b6115ad565b6040516103959392919061302d565b600c546105589063ffffffff1681565b61065b610642366004612ef4565b6002602052600090815260409020805460019091015482565b60408051928352602083019190915201610395565b61038b6116e0565b61038b610686366004613062565b600860209081526000938452604080852082529284528284209052825290205481565b6106f26106b736600461308e565b600660209081526000938452604080852082529284528284209052825290205463ffffffff811690600160201b90046001600160a01b031682565b6040805163ffffffff90931683526001600160a01b03909116602083015201610395565b610729610724366004612fb3565b61171a565b604051610395939291906130c1565b610510610746366004612fb3565b61174d565b6105106107593660046130f6565b61175e565b61077161076c36600461312d565b6118d8565b604051610395919061314f565b6103b161078c366004613001565b61196f565b6107c561079f36600461312d565b60056020908152600092835260408084209091529082529020546001600160a01b031681565b6040516001600160a01b039091168152602001610395565b61081d6107eb366004612e98565b6001602081905260009182526040909120805491015463ffffffff821691600160201b90046001600160a01b03169083565b6040805163ffffffff90941684526001600160a01b03909216602084015290820152606001610395565b610510610855366004613199565b61199a565b600e546105589063ffffffff1681565b610510610878366004613205565b611a35565b61038b600081565b610510610893366004612fb3565b612137565b61038b60115481565b6105586108af366004613271565b61240f565b6105586108c2366004612ef4565b60006020819052908152604090205463ffffffff1681565b6107c56108e8366004613271565b612465565b600e5461055890600160201b900463ffffffff1681565b3360009081526020819052604090205463ffffffff16610558565b61051061092d366004612fb3565b6124aa565b6105106109403660046132af565b6124bb565b610510610953366004612ef4565b6124df565b6109ce610966366004612e98565b60408051606081018252600080825260208201819052918101919091525063ffffffff908116600090815260016020818152604092839020835160608101855281549586168152600160201b9095046001600160a01b03169185019190915201549082015290565b60408051825163ffffffff1681526020808401516001600160a01b0316908201529181015190820152606001610395565b610510610a0d366004613001565b612634565b61038b612659565b610a2d610a28366004612e98565b612682565b60405161039591906132ca565b6013546107c590600160601b90046001600160a01b031681565b610510610a62366004613448565b6126e7565b60006001600160e01b03198216637965db0b60e01b1480610a9857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60408051606080820183526000808352602080840183905283850183905263ffffffff86168252600b8152908490208451928301909452835482526001840180549394929391840191610af09061347d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1c9061347d565b8015610b695780601f10610b3e57610100808354040283529160200191610b69565b820191906000526020600020905b815481529060010190602001808311610b4c57829003601f168201915b50505050508152602001600282018054610b829061347d565b80601f0160208091040260200160405190810160405280929190818152602001828054610bae9061347d565b8015610bfb5780601f10610bd057610100808354040283529160200191610bfb565b820191906000526020600020905b815481529060010190602001808311610bde57829003601f168201915b5050505050815250509050919050565b3360009081526020819052604081205463ffffffff1690819003610c4a5760405162461bcd60e51b8152600401610c41906134b7565b60405180910390fd5b3360009081526002602052604090206001015415610ca35760405162461bcd60e51b81526020600482015260166024820152754578697374696e67207769746864726177206c6f636b60501b6044820152606401610c41565b6000610cad612659565b60408051808201825263ffffffff851660009081526001602081815293909120015481526013549293509190820190610cea9061ffff16846134f8565b905233600090815260026020908152604090912082518155910151600190910155610d136116e0565b604080513381526020810184905263ffffffff8516917fa99f1e995421e45087421580e011e67f5c602c191093ee1276fcc0aa8d12299c910160405180910390a35050565b6000828152600f6020526040902060010154610d738161280c565b610d7d8383612816565b505050565b6001600160a01b0381163314610df25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c41565b610dfc828261289c565b5050565b3360009081526020819052604081205463ffffffff1690819003610e365760405162461bcd60e51b8152600401610c41906134b7565b336000908152600260205260408120600101549003610e8a5760405162461bcd60e51b815260206004820152601060248201526f4e6f207769746864726177206c6f636b60801b6044820152606401610c41565b6000610e94611185565b60ff1614610eb45760405162461bcd60e51b8152600401610c4190613526565b6000610ebe612659565b90506000610eca6116e0565b63ffffffff808516600090815260066020908152604080832087845282528083208584529091529020549192501615610f455760405162461bcd60e51b815260206004820152601760248201527f616c7265616479206174746573746564207369676e65720000000000000000006044820152606401610c41565b60008281526005602090815260408083208484529091529020546001600160a01b031615610fb55760405162461bcd60e51b815260206004820152601b60248201527f43616e74207769746864726177206966207369676e65722073657400000000006044820152606401610c41565b336000908152600260205260409020600101548210156110175760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207769746864726177207265717565737400000000000000006044820152606401610c41565b336000818152600260208181526040808420805463ffffffff8a168087526001808652848820810188905584518086019095528785528486018881529789905295909452915181559351929093019190915590918391907fa671b0823d8c347e26c9f35c84444a1c45846c504c636c4ca4e4039818e4055490611098611185565b604080516001600160a01b03909316835260ff9091166020830152810187905260600160405180910390a360135460405163a9059cbb60e01b815233600482015260248101839052600160601b9091046001600160a01b03169063a9059cbb906044016020604051808303816000875af115801561111a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113e919061354e565b61117f5760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c9c99590819985a5b195960721b6044820152606401610c41565b50505050565b600080611190612659565b9050600061119c6116e0565b60008381526003602052604090205490915015806111c7575060008281526003602052604090205481145b156111d65760005b9250505090565b60016111cf565b60006111e88161280c565b50601055565b60006111f8611185565b60ff16146112185760405162461bcd60e51b8152600401610c4190613526565b3360009081526020819052604081205463ffffffff169081900361124e5760405162461bcd60e51b8152600401610c41906134b7565b60125463ffffffff821660009081526001602081905260409091200154146112b85760405162461bcd60e51b815260206004820152601860248201527f7374616b65206c657373207468616e206d696e5374616b6500000000000000006044820152606401610c41565b60006112c2612659565b905060006112ce6116e0565b63ffffffff80851660009081526006602090815260408083208784528252808320858452909152902054919250161561133c5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48185d1d195cdd195960821b6044820152606401610c41565b600082815260086020908152604080832084845282528083206001600160a01b038816845290915281205490036113ad57600082815260076020908152604080832084845282528220805460018101825590835291200180546001600160a01b0319166001600160a01b0386161790555b600082815260086020908152604080832084845282528083206001600160a01b03881684529091529020546113e39060016134f8565b600083815260086020908152604080832085845282528083206001600160a01b03898116808652918452828520959095558151808301835263ffffffff898116808352828601848152818852600687528588208b895287528588208a895287529685902092518354975192166001600160c01b031990971696909617600160201b91909716029590951790945580519384523391840191909152820184905282917f44afcd709ba4a8f8e62f4b60e6bbaef1157875590dcd272e9cc5d9e59d5eb2ff9060600160405180910390a3601354600083815260086020908152604080832085845282528083206001600160a01b0389168452909152902054600160301b90910463ffffffff1610801561151a575060008281526005602090815260408083208484529091529020546001600160a01b0316155b1561117f576000828152600560209081526040808320848452825280832080546001600160a01b0319166001600160a01b0389169081179091558584526003909252909120829055817f53606917df156d9f02538caffa318589cd6bcc542b5e4892e3cc004f2527017661158c611185565b6040805160ff9092168252602082018790520160405180910390a350505050565b600b60205260009081526040902080546001820180549192916115cf9061347d565b80601f01602080910402602001604051908101604052809291908181526020018280546115fb9061347d565b80156116485780601f1061161d57610100808354040283529160200191611648565b820191906000526020600020905b81548152906001019060200180831161162b57829003601f168201915b50505050509080600201805461165d9061347d565b80601f01602080910402602001604051908101604052809291908181526020018280546116899061347d565b80156116d65780601f106116ab576101008083540402835291602001916116d6565b820191906000526020600020905b8154815290600101906020018083116116b957829003601f168201915b5050505050905083565b6000601154601054600d54426116f6919061356b565b6117009190613598565b61170a91906135ac565b6117159060016134f8565b905090565b6009602052600090815260409020805460018201805460ff83169361010090930463ffffffff1692919061165d9061347d565b60006117588161280c565b50601255565b60006117698161280c565b6001600160a01b0383166000908152600460205260409020805460ff1916831580159190911790915561184157601354600c546201000090910463ffffffff908116600160201b90920416106118015760405162461bcd60e51b815260206004820152601f60248201527f6d6178696d756d206e756d5061727469636970616e747320616c6c6f776564006044820152606401610c41565b600c5461181c90600160201b900463ffffffff1660016135c0565b600c60046101000a81548163ffffffff021916908363ffffffff16021790555061187e565b600c5461185d90600190600160201b900463ffffffff166135e8565b600c60046101000a81548163ffffffff021916908363ffffffff1602179055505b600c54604080518415158152600160201b90920463ffffffff1660208301526001600160a01b038516917f35647d40e5f4c4e92efee24c066ed3682ffdcac7142e44f6439cabbc3494475e910160405180910390a2505050565b6000828152600a6020908152604080832084845282529182902080548351818402810184019094528084526060939283018282801561196257602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116119255790505b5050505050905092915050565b6000918252600f602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006119a58161280c565b8263ffffffff168263ffffffff16106119f35760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b2103ab83230ba34b7b760811b6044820152606401610c41565b506013805469ffffffffffffffff000019166201000063ffffffff9485160269ffffffff000000000000191617600160301b9290931691909102919091179055565b6001611a3f611185565b60ff1614611a5f5760405162461bcd60e51b8152600401610c4190613526565b3360009081526020819052604081205463ffffffff1690819003611a955760405162461bcd60e51b8152600401610c41906134b7565b600e5463ffffffff808216600160201b9092041610611af65760405162461bcd60e51b815260206004820152601d60248201527f4e6f2070656e64696e6720726571756573747320746f2066756c66696c0000006044820152606401610c41565b6000611b00612659565b63ffffffff808416600090815260066020908152604080832085845282528083206003835281842054845290915281205492935091169003611b845760405162461bcd60e51b815260206004820152601b60248201527f7369676e6572206174746573746174696f6e206e6f7420646f6e6500000000006044820152606401610c41565b6000611b8e6116e0565b905060008080611ba08789018961360d565b93505092509250838314611bf65760405162461bcd60e51b815260206004820152601d60248201527f696e76616c69642065706f636820696e206d65737361676520646174610000006044820152606401610c41565b8163ffffffff16600003611c425760405162461bcd60e51b815260206004820152601360248201527207265717565737449642063616e74206265203606c1b6044820152606401610c41565b63ffffffff821660009081526009602052604090205460ff1615611ca85760405162461bcd60e51b815260206004820152601960248201527f5265717565737420416c72656164792066756c66696c6c6564000000000000006044820152606401610c41565b8051600003611cf25760405162461bcd60e51b81526020600482015260166024820152756e6f2076616c75657320696e2074686520626c6f636b60501b6044820152606401610c41565b8163ffffffff16600114611d755760096000611d0f6001856135e8565b63ffffffff16815260208101919091526040016000205460ff16611d755760405162461bcd60e51b815260206004820152601e60248201527f70726576696f75732072657175657374206e6f742066756c66696c6c656400006044820152606401610c41565b60008888604051611d8792919061366e565b604080519182900382206000898152600560209081528382206003825284832054835281529083902054601f8f018290048202850182019093528d84529093506001600160a01b0390911691611dfa918491908f908f908190840183828082843760009201919091525061290392505050565b6001600160a01b031614611e445760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610c41565b600089898d8d604051602001611e5d949392919061367e565b60408051601f19818403018152918152815160209283012060008a8152600a84528281208a825290935291205490915015611f0057600e54600160401b900463ffffffff166000908152600b6020526040902054819003611f005760405162461bcd60e51b815260206004820181905260248201527f626c6f636b20636f6e74656e747320616c726561647920636f6e6669726d65646044820152606401610c41565b600e54611f1b90600160401b900463ffffffff1660016135c0565b600e80546bffffffff00000000000000001916600160401b63ffffffff938416021790819055611f5591600160201b9091041660016135c0565b600e805467ffffffff000000001916600160201b63ffffffff9384160217808255600160401b9081900483166000908152600b602052604080822086905592549190910490921682529020600101611fae8a8c836136ee565b50600e54600160401b900463ffffffff166000908152600b60205260409020600201611fdb8c8e836136ee565b50600a60008881526020019081526020016000206000878152602001908152602001600020600e60089054906101000a900463ffffffff1690806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff1602179055506001600960008663ffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555085336001600160a01b03167fe78ab702f00760a3b3a89d68435e59474a455d2027883c0df5660521dc3193be8e8e600560008d81526020019081526020016000206000600360008f815260200190815260200160002054815260200190815260200160002060009054906101000a90046001600160a01b03168f8f8e604051612121969594939291906137d8565b60405180910390a3505050505050505050505050565b60125481146121805760405162461bcd60e51b81526020600482015260156024820152746e6f7420657175616c20746f206d696e5374616b6560581b6044820152606401610c41565b3360009081526020819052604090205463ffffffff16156121d95760405162461bcd60e51b815260206004820152601360248201527230b63932b0b23c9030903b30b634b230ba37b960691b6044820152606401610c41565b3360009081526004602052604090205460ff166122385760405162461bcd60e51b815260206004820152601760248201527f41646472657373206e6f742077686974656c69737465640000000000000000006044820152606401610c41565b600c5461224c9063ffffffff1660016135c0565b600c805463ffffffff92831663ffffffff19918216811783553360008181526020818152604080832080549096169094179094558251606081018452945486168086528585019283528584018881529082526001948590529290209351845491516001600160a01b0316600160201b026001600160c01b031990921695169490941793909317825591519101556122e16116e0565b3360008181526020819052604090205463ffffffff16907fe50d80170d4417b966da72323d10dea631cd643edd45179edd41194828fded73908490612324612659565b604080519384526001600160a01b0390921660208401529082015260600160405180910390a36013546040516323b872dd60e01b815233600482015230602482015260448101839052600160601b9091046001600160a01b0316906323b872dd906064016020604051808303816000875af11580156123a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123cb919061354e565b61240c5760405162461bcd60e51b81526020600482015260126024820152711d1c985b9cd9995c9c99590819985a5b195960721b6044820152606401610c41565b50565b600a602052826000526040600020602052816000526040600020818154811061243757600080fd5b906000526020600020906008918282040191900660040292509250509054906101000a900463ffffffff1681565b6007602052826000526040600020602052816000526040600020818154811061248d57600080fd5b6000918252602090912001546001600160a01b0316925083915050565b60006124b58161280c565b50601155565b60006124c68161280c565b506013805461ffff191661ffff92909216919091179055565b601354600160581b900460ff161580801561250757506013546001600160501b90910460ff16105b806125285750303b1580156125285750601354600160501b900460ff166001145b61258b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c41565b6013805460ff60501b1916600160501b17905580156125b8576013805460ff60581b1916600160581b1790555b60006125c38161280c565b50601380546bffffffffffffffffffffffff16600160601b6001600160a01b038516021790558015610dfc576013805460ff60581b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6000828152600f602052604090206001015461264f8161280c565b610d7d838361289c565b600060105460115461266b9190613822565b600d54612678904261356b565b61170a9190613598565b60408051606080820183526000808352602080840182905283850183905263ffffffff8681168352600982529185902085519384018652805460ff811615158552610100900490921690830152600181018054939492939192840191610b829061347d565b60006126f28161280c565b600e546127069063ffffffff1660016135c0565b600e805463ffffffff191663ffffffff929092169190911790556040516000906127349084906020016138a4565b60408051808303601f190181526060830182526000808452600e5463ffffffff908116602080870182815287870186815292855260099091529490922085518154955164ffffffffff1990961690151564ffffffff0019161761010095909216949094021783555190935060018201906127ae90826138b7565b509050506127ba6116e0565b600e5433907f82eeb9f13dcbab60eaf396da72ce4714ecf8a0e4133f5aa0ea425378491675099063ffffffff16866127f0612659565b6040516127ff93929190613977565b60405180910390a3505050565b61240c8133612927565b612820828261196f565b610dfc576000828152600f602090815260408083206001600160a01b03851684529091529020805460ff191660011790556128583390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6128a6828261196f565b15610dfc576000828152600f602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008060006129128585612980565b9150915061291f816129ee565b509392505050565b612931828261196f565b610dfc5761293e81612ba4565b612949836020612bb6565b60405160200161295a9291906139a6565b60408051601f198184030181529082905262461bcd60e51b8252610c4191600401613a1b565b60008082516041036129b65760208301516040840151606085015160001a6129aa87828585612d59565b945094505050506129e7565b82516040036129df57602083015160408401516129d4868383612e46565b9350935050506129e7565b506000905060025b9250929050565b6000816004811115612a0257612a02613510565b03612a0a5750565b6001816004811115612a1e57612a1e613510565b03612a6b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c41565b6002816004811115612a7f57612a7f613510565b03612acc5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c41565b6003816004811115612ae057612ae0613510565b03612b385760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c41565b6004816004811115612b4c57612b4c613510565b0361240c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610c41565b6060610a986001600160a01b03831660145b60606000612bc5836002613822565b612bd09060026134f8565b67ffffffffffffffff811115612be857612be8613309565b6040519080825280601f01601f191660200182016040528015612c12576020820181803683370190505b509050600360fc1b81600081518110612c2d57612c2d613a2e565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612c5c57612c5c613a2e565b60200101906001600160f81b031916908160001a9053506000612c80846002613822565b612c8b9060016134f8565b90505b6001811115612d03576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612cbf57612cbf613a2e565b1a60f81b828281518110612cd557612cd5613a2e565b60200101906001600160f81b031916908160001a90535060049490941c93612cfc81613a44565b9050612c8e565b508315612d525760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c41565b9392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612d905750600090506003612e3d565b8460ff16601b14158015612da857508460ff16601c14155b15612db95750600090506004612e3d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612e0d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612e3657600060019250925050612e3d565b9150600090505b94509492505050565b6000806001600160ff1b03831681612e6360ff86901c601b6134f8565b9050612e7187828885612d59565b935093505050935093915050565b803563ffffffff81168114612e9357600080fd5b919050565b600060208284031215612eaa57600080fd5b612d5282612e7f565b600060208284031215612ec557600080fd5b81356001600160e01b031981168114612d5257600080fd5b80356001600160a01b0381168114612e9357600080fd5b600060208284031215612f0657600080fd5b612d5282612edd565b60005b83811015612f2a578181015183820152602001612f12565b8381111561117f5750506000910152565b60008151808452612f53816020860160208601612f0f565b601f01601f19169290920160200192915050565b60208152815160208201526000602083015160606040840152612f8d6080840182612f3b565b90506040840151601f19848303016060850152612faa8282612f3b565b95945050505050565b600060208284031215612fc557600080fd5b5035919050565b600080600060608486031215612fe157600080fd5b8335925060208401359150612ff860408501612e7f565b90509250925092565b6000806040838503121561301457600080fd5b8235915061302460208401612edd565b90509250929050565b8381526060602082015260006130466060830185612f3b565b82810360408401526130588185612f3b565b9695505050505050565b60008060006060848603121561307757600080fd5b8335925060208401359150612ff860408501612edd565b6000806000606084860312156130a357600080fd5b6130ac84612e7f565b95602085013595506040909401359392505050565b831515815263ffffffff83166020820152606060408201526000612faa6060830184612f3b565b801515811461240c57600080fd5b6000806040838503121561310957600080fd5b61311283612edd565b91506020830135613122816130e8565b809150509250929050565b6000806040838503121561314057600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561318d57835163ffffffff168352928401929184019160010161316b565b50909695505050505050565b600080604083850312156131ac57600080fd5b6131b583612e7f565b915061302460208401612e7f565b60008083601f8401126131d557600080fd5b50813567ffffffffffffffff8111156131ed57600080fd5b6020830191508360208285010111156129e757600080fd5b6000806000806040858703121561321b57600080fd5b843567ffffffffffffffff8082111561323357600080fd5b61323f888389016131c3565b9096509450602087013591508082111561325857600080fd5b50613265878288016131c3565b95989497509550505050565b60008060006060848603121561328657600080fd5b505081359360208301359350604090920135919050565b803561ffff81168114612e9357600080fd5b6000602082840312156132c157600080fd5b612d528261329d565b6020815281511515602082015263ffffffff6020830151166040820152600060408301516060808401526133016080840182612f3b565b949350505050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561334257613342613309565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561337157613371613309565b604052919050565b600082601f83011261338a57600080fd5b8135602067ffffffffffffffff8211156133a6576133a6613309565b6133b4818360051b01613348565b82815260079290921b840181019181810190868411156133d357600080fd5b8286015b8481101561343d57608081890312156133f05760008081fd5b6133f861331f565b8135600081810b8214613409578081fd5b50815261341782860161329d565b8186015260408281013590820152606080830135908201528352918301916080016133d7565b509695505050505050565b60006020828403121561345a57600080fd5b813567ffffffffffffffff81111561347157600080fd5b61330184828501613379565b600181811c9082168061349157607f821691505b6020821081036134b157634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526011908201527024b73b30b634b2102b30b634b230ba37b960791b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561350b5761350b6134e2565b500190565b634e487b7160e01b600052602160045260246000fd5b6020808252600e908201526d496e636f7272656374204d6f646560901b604082015260600190565b60006020828403121561356057600080fd5b8151612d52816130e8565b60008282101561357d5761357d6134e2565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826135a7576135a7613582565b500490565b6000826135bb576135bb613582565b500690565b600063ffffffff8083168185168083038211156135df576135df6134e2565b01949350505050565b600063ffffffff83811690831681811015613605576136056134e2565b039392505050565b6000806000806080858703121561362357600080fd5b8435935061363360208601612e7f565b925060408501359150606085013567ffffffffffffffff81111561365657600080fd5b61366287828801613379565b91505092959194509250565b8183823760009101908152919050565b8385823760008482016000815283858237600093019283525090949350505050565b601f821115610d7d57600081815260208120601f850160051c810160208610156136c75750805b601f850160051c820191505b818110156136e6578281556001016136d3565b505050505050565b67ffffffffffffffff83111561370657613706613309565b61371a83613714835461347d565b836136a0565b6000601f84116001811461374e57600085156137365750838201355b600019600387901b1c1916600186901b1783556137a8565b600083815260209020601f19861690835b8281101561377f578685013582556020948501946001909201910161375f565b508682101561379c5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6080815260006137ec60808301888a6137af565b6001600160a01b0387166020840152828103604084015261380e8186886137af565b915050826060830152979650505050505050565b600081600019048311821515161561383c5761383c6134e2565b500290565b60008151808452602080850194508084016000805b848110156138985782518051830b89528481015161ffff16858a0152604080820151908a01526060908101519089015260809097019691830191600101613856565b50959695505050505050565b602081526000612d526020830184613841565b815167ffffffffffffffff8111156138d1576138d1613309565b6138e5816138df845461347d565b846136a0565b602080601f83116001811461391a57600084156139025750858301515b600019600386901b1c1916600185901b1785556136e6565b600085815260208120601f198616915b828110156139495788860151825594840194600190910190840161392a565b50858210156139675787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b63ffffffff841681526060602082015260006139966060830185613841565b9050826040830152949350505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516139de816017850160208801612f0f565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613a0f816028840160208801612f0f565b01602801949350505050565b602081526000612d526020830184612f3b565b634e487b7160e01b600052603260045260246000fd5b600081613a5357613a536134e2565b50600019019056fea26469706673582212206f6ce1d1b7d512e4b5043cbd7050a78bdd072b639049ef8ab59093143555aa0364736f6c634300080f0033",
  "devdoc": {
    "events": {
      "AttestSigner(address,uint32,address,uint256,uint256)": {
        "details": "Emitted when a validator tries to attest signerAddress for the first time.",
        "params": {
          "dynasty": "current dynasty of attestSigner",
          "epoch": "current epoch of attestSigner",
          "sender": "caller of the attestSigner",
          "signerAddress": "address attested by all validators",
          "validatorId": "ID of the validator from the active set of validators"
        }
      },
      "CreatedRequest(uint32,(int8,uint16,bytes32,uint256)[],address,uint256,uint256)": {
        "details": "Emitted when there has been a call to createRequest. Can only be called by the admin",
        "params": {
          "numRequests": "number of requests so far (requestId)",
          "requestValues": "Struct of values submitted consists of (int8 power,uint16 collectionId,bytes32 name,uint256 value)",
          "requesterAddress": "address of the createRequest caller"
        }
      },
      "FinalizeRequest(bytes,address,bytes,address,uint256,uint256)": {
        "details": "Emitted when a block is successfully created and finalized.",
        "params": {
          "dynasty": "current dynasty of finalizeRequest",
          "epoch": "current epoch of finalizeRequest",
          "messageData": "the data being finalized",
          "sender": "caller of finalizeRequest ie, finalizing address",
          "signature": "with which the message is signed",
          "signerAddress": "address of the public signer address"
        }
      },
      "SetWhitelist(address,bool,uint32)": {
        "details": "Emitted when an address is whitelisted by admin",
        "params": {
          "numWhitelisted": "number of whitelisted addresses",
          "status": "is address whitelisted or not",
          "validatorAddress": "address of the validator"
        }
      },
      "SigningFulfilled(uint8,uint256,uint256,address)": {
        "details": "Emitted when signerVotesPerAttestation in current dynasty has votes more than the required threshold for the current signerAddress.",
        "params": {
          "dynasty": "current dynasty mode change occurred",
          "epoch": "current epoch mode change occurred",
          "mode": "signing mode",
          "signerAddress": "address attested by all validators"
        }
      },
      "Staked(uint256,address,uint32,uint256,uint256)": {
        "details": "Emitted when a whitelisted address has staked RAZOR tokens.",
        "params": {
          "amount": "staked by validator",
          "dynasty": "current dynasty validator has staked in",
          "epoch": "current epoch validator has staked in",
          "validator": "address",
          "validatorId": "ID of given validator address"
        }
      },
      "Unstaked(address,uint32,uint256,uint256)": {
        "details": "Emitted when a whitelisted address has unstaked RAZOR tokens.",
        "params": {
          "dynasty": "current dynasty validator has unstaked in",
          "epoch": "current epoch validator has unstaked in",
          "validator": "address",
          "validatorId": "ID of given validator address"
        }
      },
      "Withdraw(address,uint32,uint8,uint256,uint256)": {
        "details": "Emitted when a whitelisted address has withdrawn RAZOR tokens.",
        "params": {
          "dynasty": "current dynasty validator has unstaked in",
          "epoch": "current epoch validator has unstaked in",
          "mode": "current mode",
          "validator": "address",
          "validatorId": "ID of given validator address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "attestSigner(address)": {
        "params": {
          "signerAddress": "address of the signer that is being attested by the validator"
        }
      },
      "createRequest((int8,uint16,bytes32,uint256)[])": {
        "params": {
          "requestValues": "values to be bridged by the bridge node"
        }
      },
      "finalizeRequest(bytes,bytes)": {
        "params": {
          "messageData": "the message that is to be bridged. The message has to be encoded and then sent to the contracts. Encoding is to be done in the following pattern: epoch(uint256), requestId(uint32), timestamp(uint256), values(Struct.Value[]) If not followed, the contracts would throw an error",
          "signature": "generated signature by the nodes"
        }
      },
      "getBlock(uint32)": {
        "params": {
          "blockId": "id of the block"
        },
        "returns": {
          "_0": "_block : struct of the confirmed block"
        }
      },
      "getBlockIdsConfirmed(uint256,uint256)": {
        "returns": {
          "_0": "blockIds array of blockIds confirmed"
        }
      },
      "getDynasty()": {
        "returns": {
          "_0": "the value of current dynasty"
        }
      },
      "getEpoch()": {
        "returns": {
          "_0": "the value of current epoch in the dynasty"
        }
      },
      "getMode()": {
        "returns": {
          "mode": "the value of current mode we are in the dynasty"
        }
      },
      "getRequest(uint32)": {
        "params": {
          "requestId": "the id of the request"
        },
        "returns": {
          "_0": "request the Struct of the request information"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSignerAttestation(uint256,uint256,uint32)": {
        "params": {
          "validatorId": "id of the validator whose signer attestion we want to fetcj"
        },
        "returns": {
          "_0": "the Struct of the signer attestation"
        }
      },
      "getStake(uint32)": {
        "params": {
          "validatorId": "ID of the validator"
        },
        "returns": {
          "_0": "stake of validator"
        }
      },
      "getValidator(uint32)": {
        "params": {
          "validatorId": "The validator ID"
        },
        "returns": {
          "validator": "The Struct of validator information"
        }
      },
      "getValidatorId()": {
        "returns": {
          "_0": "The validator ID"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address)": {
        "params": {
          "bridgeTokenAddress": "The address of the bridge token ERC20 contract"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setWhiteList(address,bool)": {
        "params": {
          "status": "whitelist status of the validator address",
          "validatorAddress": "address of the validator who the admin would set/remove from whitelist"
        }
      },
      "stake(uint256)": {
        "params": {
          "amount": "The amount to be staked"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "attestSigner(address)": {
        "notice": "each validator is required to send their attestation of the public key of the signer generated in the form of address. Once one of the votes of the signer address exceeds threshold, that is set as signer address for the rest of the dynasty"
      },
      "createRequest((int8,uint16,bytes32,uint256)[])": {
        "notice": "creates a request that is to be fulfilled by the bridge node"
      },
      "finalizeRequest(bytes,bytes)": {
        "notice": "Once the signature has been generated by the bridge nodes for a particular request, one of the validators can call this function which will verify the signature created with the message that is to be bridged"
      },
      "getBlock(uint32)": {
        "notice": "return the struct of the confirmed block"
      },
      "getBlockIdsConfirmed(uint256,uint256)": {
        "notice": "returns an array of blockIds confirmed in specified epoch of the dynasty"
      },
      "setWhiteList(address,bool)": {
        "notice": "adding/removing a validator from whitelist to enable/disable staking for the validator address"
      },
      "stake(uint256)": {
        "notice": "Validator to stake after being whitelisted to take part in bridge operations"
      },
      "unstake()": {
        "notice": "a signal to the network that the validator is planning to withdraw their funds from the network. validator would still continue to participate till the validator withdraws"
      },
      "withdraw()": {
        "notice": "allows validator to withdraw their funds once withdrawLockPeriod has passed"
      }
    },
    "notice": "this contract is part of the bridge ecosystem and has to be deployed on the source chain",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2257,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "validatorIds",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 2262,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "validators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_struct(Validator)3927_storage)"
      },
      {
        "astId": 2267,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "locks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Lock)3932_storage)"
      },
      {
        "astId": 2271,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "modeChange",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2275,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "whitelistedAddresses",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2281,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "signerAddressPerDynasty",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 2290,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "signerAttestations",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint32,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SignerAttestation)3937_storage)))"
      },
      {
        "astId": 2297,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "attestedSignerAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 2305,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "signerVotesPerAttestation",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 2310,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "requests",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Request)3944_storage)"
      },
      {
        "astId": 2317,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "blockIdsConfirmed",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint32)dyn_storage))"
      },
      {
        "astId": 2322,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "blocks",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint32,t_struct(Block)3951_storage)"
      },
      {
        "astId": 2324,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "numValidators",
        "offset": 0,
        "slot": "12",
        "type": "t_uint32"
      },
      {
        "astId": 2326,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "numWhitelisted",
        "offset": 4,
        "slot": "12",
        "type": "t_uint32"
      },
      {
        "astId": 2328,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "firstDynastyCreation",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2330,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "numRequests",
        "offset": 0,
        "slot": "14",
        "type": "t_uint32"
      },
      {
        "astId": 2332,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "numRequestsFulfilled",
        "offset": 4,
        "slot": "14",
        "type": "t_uint32"
      },
      {
        "astId": 2334,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "numBlocksCreated",
        "offset": 8,
        "slot": "14",
        "type": "t_uint32"
      },
      {
        "astId": 24,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "_roles",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2346,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "epochLength",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2349,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "dynastyLength",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2357,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "minStake",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2360,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "withdrawLockPeriod",
        "offset": 0,
        "slot": "19",
        "type": "t_uint16"
      },
      {
        "astId": 2363,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "numParticipants",
        "offset": 2,
        "slot": "19",
        "type": "t_uint32"
      },
      {
        "astId": 2366,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "threshold",
        "offset": 6,
        "slot": "19",
        "type": "t_uint32"
      },
      {
        "astId": 395,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "_initialized",
        "offset": 10,
        "slot": "19",
        "type": "t_uint8"
      },
      {
        "astId": 398,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "_initializing",
        "offset": 11,
        "slot": "19",
        "type": "t_bool"
      },
      {
        "astId": 2488,
        "contract": "src/core/Bridge.sol:Bridge",
        "label": "bridgeToken",
        "offset": 12,
        "slot": "19",
        "type": "t_contract(IERC20)1204"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1204": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Lock)3932_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Structs.Lock)",
        "numberOfBytes": "32",
        "value": "t_struct(Lock)3932_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint32)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint32)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint32[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_uint32)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SignerAttestation)3937_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct Structs.SignerAttestation))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(SignerAttestation)3937_storage)"
      },
      "t_mapping(t_uint256,t_struct(Request)3944_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Structs.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)3944_storage"
      },
      "t_mapping(t_uint256,t_struct(SignerAttestation)3937_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Structs.SignerAttestation)",
        "numberOfBytes": "32",
        "value": "t_struct(SignerAttestation)3937_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SignerAttestation)3937_storage)))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(uint256 => mapping(uint256 => struct Structs.SignerAttestation)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(SignerAttestation)3937_storage))"
      },
      "t_mapping(t_uint32,t_struct(Block)3951_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct Structs.Block)",
        "numberOfBytes": "32",
        "value": "t_struct(Block)3951_storage"
      },
      "t_mapping(t_uint32,t_struct(Validator)3927_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct Structs.Validator)",
        "numberOfBytes": "32",
        "value": "t_struct(Validator)3927_storage"
      },
      "t_struct(Block)3951_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Block",
        "members": [
          {
            "astId": 3946,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "blockHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3948,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "message",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3950,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "signature",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Lock)3932_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Lock",
        "members": [
          {
            "astId": 3929,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3931,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "unlockAfter",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Request)3944_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Request",
        "members": [
          {
            "astId": 3939,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "fulfilled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3941,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "requestId",
            "offset": 1,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3943,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "requestData",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SignerAttestation)3937_storage": {
        "encoding": "inplace",
        "label": "struct Structs.SignerAttestation",
        "members": [
          {
            "astId": 3934,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "validatorId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3936,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "signerAddress",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Validator)3927_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Validator",
        "members": [
          {
            "astId": 3922,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3924,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "_validatorAddress",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3926,
            "contract": "src/core/Bridge.sol:Bridge",
            "label": "stake",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}